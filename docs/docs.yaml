openapi: 3.0.0
info:
  version: "1.0.0"
  title: Authentication API
servers:
  - url: authentication-demo.nasportfolio.com
paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate a user and return a token
      description: When given valid credentials of user will return the token of the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: Invalid request body
        401:
          description: Invalid password
        404:
          description: User not found
        405:
          description: Invalid method

  /api/auth/password:
    put:
      tags:
        - Auth
      summary: Update user password
      description: This route is to update the users password by giving the old password and new password
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Password updated successfully
        400:
          description: Invalid request body
        401:
          description: Invalid old password
        405:
          description: Invalid method

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user with data given and returns token of user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                imageUrl:
                  type: string
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: Invalid request body
        409:
          description: Email already in use
        405:
          description: Invalid method

  /api/auth/validate-token:
    get:
      tags:
        - Auth
      summary: Get current user information from token
      description: This route is primarily used to check if the token is still valid and to get the user associated with the token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Returns current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  image:
                    type: string
        401:
          description: Invalid token
        405:
          description: Invalid method
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns a list of all users in the database
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
    put:
      tags:
        - Users
      summary: Update user account information
      description: Updates the email, username, and/or image of the currently logged in user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                imageUrl:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Deletes the currently logged in user account from the database
      responses:
        200:
          description: OK
      security:
        - bearerAuth: []
  /api/users/{userId}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      description: Gets a user by their id from the database
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /api/images:
    post:
      tags:
        - Images
      summary: Upload an image file
      description: Uploads an image file to Firebase Cloud Storage and returns the URL to access the image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        image:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT